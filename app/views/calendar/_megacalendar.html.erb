<%
  if use_values_from_session
    js_default_date = session[:mega_calendar_js_default_date]
    js_user_query = session[:mega_calendar_js_user_query]
  else
    js_default_date = Date.today.to_s
    js_user_query = true
  end
  if js_user_query.nil?
    js_user_query = true
    session[:mega_calendar_js_user_query] = js_user_query
  end
  if js_default_date.nil?
    js_default_date = Date.today.to_s
    session[:mega_calendar_js_default_date] = js_default_date
  end
%>
<% content_for :header_tags do %>
  <%= stylesheet_link_tag 'fullcalendar/fullcalendar.css',:plugin => 'mega_calendar' %>
  <%= stylesheet_link_tag 'qtip2/jquery.qtip.min.css',:plugin => 'mega_calendar' %>
  <%= stylesheet_link_tag 'custom.css',:plugin => 'mega_calendar' %>
  <%= javascript_include_tag 'fullcalendar/lib/moment.min.js',:plugin => 'mega_calendar' %>
  <%= javascript_include_tag 'fullcalendar/fullcalendar.js',:plugin => 'mega_calendar' %>
  <%= javascript_include_tag 'qtip2/jquery.qtip.min.js',:plugin => 'mega_calendar' %>
  <%= javascript_include_tag 'fullcalendar/lang-all.js',:plugin => 'mega_calendar' %>
  <style>
  .calendar_event {
    pointer:cursor !important;
    color:#000000 !important;
  }

  .calendar_event_closed {
    text-decoration: line-through !important;
    opacity: 0.6 !important;
  }
  </style>
<% end %>
<h2><%= translate 'label_calendar' %></h2>
<div id='calendar'" class="<%= calendar_class %>"></div>

<%= @days_of_week %>

<script type="text/javascript">
  var user_query = <%= js_user_query.to_s %>;
  function set_active_button(user) {
    var btn_mytickets = $('.fc-myTickets-button');
    var btn_alltickets = $('.fc-allTickets-button');
    if(user === true) {
      btn_mytickets.addClass('fc-state-active');
      btn_alltickets.removeClass('fc-state-active');
    } else {
      btn_mytickets.removeClass('fc-state-active');
      btn_alltickets.addClass('fc-state-active');
    }
  }
  $(document).ready(function() {
    $('#calendar').fullCalendar({
      lang: '<%= I18n.locale %>',
      defaultView: '<%= default_view %>',
      height: '<%= calendar_height %>',
      minTime: '<%= @start_time %>:00',
      maxTime: '<%= @end_time %>:00',
      hiddenDays: <%= raw(@hidden_days_of_week.map(&:to_i)) %>,
      customButtons: {
                myTickets: {
                        text: '<%= translate 'label_assigned_to_me_issues' %>',
                        click: function() {
                          user_query = true;
                          set_active_button(user_query);
                          $('#calendar').fullCalendar( 'refetchEvents' );
                        }
                },
                allTickets: {
                        text: '<%= translate 'label_issues_visibility_all' %>',
                        click: function() {
                          user_query = false;
                          set_active_button(user_query);
                          $('#calendar').fullCalendar( 'refetchEvents' );
                        }
                }

      },
      header: {
                        left: '<%= (show_view_buttons == false ? '' : 'prev,next today ') %>allTickets,myTickets',
                        center: 'title',
                        right: '<%= (show_view_buttons == false ? '' : 'month,agendaWeek,agendaDay') %>'
                },
      displayEventEnd: true,
      defaultDate: '<%= js_default_date %>',
      events: function(start, end, timezone, callback) {
          $.ajax({
            url: '<%= @base_url %>/calendar/get_events',
            dataType: 'json',
            data: {
              start: start.format("YYYY-MM-DD HH:MM"),
              end: end.format("YYYY-MM-DD HH:MM"),
              user: user_query,
              save_values: <%= use_values_from_session %>
            },
            success: function(doc) {
              var events = [];
              $(doc).each(function() { events.push(this); });
              callback(events);
            }
        });
      },
      eventRender: function(event, element) {
          element.qtip({ content: event.description, position: { target: 'mouse', adjust: { x: 5, y: 5}} });
      },
      eventLimit: true,
      editable: true,
      eventDrop: function(event, delta, revertFunc) {
        if(!confirm("<%= (translate 'save_question') %>")) {
          revertFunc();
        } else {
          var event_begin = event.start.format();
          var event_end = (event.end !== null ? event.end.format() : null);
          var allDay = event.allDay;
          $.get('<%= @base_url %>/calendar/change_' + event.controller_name, { id: event.id, event_begin: event_begin, event_end: event_end, allDay: allDay });
        }
      },
      eventResize: function(event, delta, revertFunc) {
        if(!confirm("<%= (translate 'save_question') %>")) {
          revertFunc();
        } else {
          $.get('<%= @base_url %>/calendar/change_' + event.controller_name, { id: event.id, event_begin: event.start.format(), event_end: event.end.format() });
        }
      }
    });
    set_active_button(user_query);
    setInterval(function(){
        $('#calendar').fullCalendar( 'refetchEvents' );
    }, 30000);
  });
</script>
